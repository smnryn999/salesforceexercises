<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>Apex Triggers</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>Apex Trigger Examples</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - Write a method for the trigger that updates the Rating field of a newly created Account to 'Hot' if the Industry field is 'Banking' or 'Healthcare'.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        public class HandlerClass {
          public static void updateRatingField(List&lt;Account&gt; listAcc){ <em> // listAcc represents Trigger.new </em>
            for(Account acc : listAcc){
               If( !String.isBlank(acc.Industry) <span style='color:red'>&&</span> (acc.Industry == 'Banking' || acc.Industry == 'Healthcare')){
                  acc.Rating = 'Hot';
               }
           }
         }  
        }

        trigger AccountTrigger on Account (before insert) {
          if(Trigger.isBefore <span style='color:red'>&&</span> Trigger.isInsert){
            HandlerClass.updateRatingField(Trigger.new);
          }
        }      
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - When a contact record is updated, write a trigger that changes the Description field to the profile name of the user who updated it.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        public class HandlerClass {
          public static void updateDescriptionField(List&lt;Contact&gt; conList){
            Profile profile = [SELECT Name FROM Profile WHERE Id = :UserInfo.getProfileId()];
            for(Contact con : conList){
                con.Description = 'This record was last updated by ' + profile.Name;
            }
          }        
        }

        trigger ContactTrigger on Contact (before update) {
          if(Trigger.isBefore <span style='color:red'>&&</span> Trigger.isUpdate){
            HandlerClass.updateDescriptionField(Trigger.new);
          }
        }                     
      </pre>
    </div>

    <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - Please write a trigger that throws an error when a user wants to delete a contact record that is not related to any Account.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        public class HandlerClass {
          public static void contactDeleteError(List&lt;Contact&gt; conList){ <em> // conList represents Trigger.old</em> 
            for(Contact con : conList){
                If(String.isBlank(con.AccountId)){
                    con.addError('You have no permission to perform this action.');
                }
            }
          }              
        }

        trigger ContactTrigger on Contact (before delete) {
          if(Trigger.isBefore <span style='color:red'>&&</span> Trigger.isDelete){
            HandlerClass.contactDeleteError(Trigger.old);
          }
        }              
        </pre>
    </div>

    <!-- EXAMPLE 4 -->
    <div class="example">
      <p><span class="counter"></span> - Send an email and notification to the new owner when the owner of an account changes.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
          public static void sendEmailAndNotification(List&lt;Account&gt; listAccount, Map&lt;Id, Account&gt; oldAccounts){
             List&lt;Account> accounts = [SELECT Owner.Email FROM Account WHERE Id=:oldAccounts.keySet()];
            
             Map&lt;Id, String&gt; mapAccountOwners = new Map&lt;Id, String&gt;();
             for(Account acc:accounts){
                 mapAccountOwners.put(acc.Id, acc.Owner.Email);
             }        
    
             List&lt;Messaging.Email&gt; emails = new List&lt;Messaging.Email&gt;();
    
             for(Account acc:listAccount){
                if(acc.OwnerId != oldAccounts.get(acc.Id).OwnerId){                
                  Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
                  email.setSubject('Account Owner');
                  email.setPlainTextBody(acc.Name + ' has been assigned to you.');
                  email.setToAddresses(new List<String>{mapAccountOwners.get(acc.Id)});
                  emails.add(email);
               }    
              }
              Messaging.sendEmail(emails);  

              <em> // First, We must create a custom notification type </em>
              <em> // Get the Id for our custom notification type </em>
              CustomNotificationType notificationType = [SELECT Id FROM CustomNotificationType WHERE DeveloperName='Custom_Notification'];
                    
              for(Account acc:listAccount){
                  if(acc.OwnerId != oldAccounts.get(acc.Id).OwnerId){
                      Messaging.CustomNotification notification= new Messaging.CustomNotification();
                      notification.setNotificationTypeId(notificationType.Id);
                      notification.setTitle('Account Owner Changed');
                      notification.setBody(acc.Name + ' has been assigned to you.');
                      notification.setTargetId(acc.Id);
                      notification.send(new Set<String>{acc.OwnerId});
                  }    
              }
          }

          <em> // We are calling the method within the trigger </em>
          trigger AccountTrigger on Account (after update) {
             if(Trigger.isAfter <span style='color:red'>&&</span> Trigger.isUpdate){
                HandlerClass.sendEmailAndNotification(Trigger.new, Trigger.oldMap);
             }
           }              
        </pre>
    </div>

    <!-- EXAMPLE 5 -->
    <div class="example">
      <p><span class="counter"></span> - When a new account is created if there is another account with the same name, write a trigger that assigns the old one as the parent of the new one and adds country information next to the name of the new one.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
       public class HandlerClass {
          public static void setParent(List<Account> newAccounts){
             List<Account> currentAccounts = [SELECT Id, Name FROM Account];
        
             for(Account newAcc:newAccounts){
                 for(Account oldAcc:currentAccounts){
                     if(newAcc.Name == oldAcc.Name){
                        newAcc.ParentId = oldAcc.id;
                        newAcc.Name = newAcc.Name + ' ' + (newAcc.BillingCountry != null ? newAcc.BillingCountry : 'Child');
                     }
                 }
             }
           }
        }

        trigger AccountTrigger on Account (before insert) {
          if(Trigger.isBefore <span style='color:red'>&&</span> Trigger.isInsert){
            HandlerClass.setParent(Trigger.new);
          }
        }      
      </pre>
    </div>

    <!-- EXAMPLE 6 -->
    <div class="example">
      <p><span class="counter"></span> - Create a field showing the Id value on the Book__c object and automatically give the required value in case of insert and update.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
       public class HandlerClass {
          <em> // After Insert </em>
          public static void setIdForInsert(List<Book__c> listBook){
             List<Book__c> books = new List<Book__c>();
             for(Book__c b:listBook){
                Book__c book = new Book__c();
                book.Id = b.Id;
                book.Id__c = b.Id;
                book.Name = b.Name;
                book.Price__c = b.Price__c;
                books.add(book);
              }
              update books;
           }

           <em> // Before Update </em>
           public static void setIdForUpdate(List<Book__c> listBook){
              for(Book__c b:listBook){
                 b.Id__c = b.Id;
              }
           }
        }

        trigger BookTrigger on Account (before update, after insert) {
           if(Trigger.isAfter <span style='color:red'>&&</span> Trigger.isInsert){
              HandlerClass.setIdForInsert(Trigger.new);
           }
           if(Trigger.isBefore <span style='color:red'>&&</span> Trigger.isUpdate){
              HandlerClass.setIdForUpdate(Trigger.new);
           }
        }      
      </pre>
    </div>
  </section>

  <script src="examples.js"></script>

</body>

</html>
