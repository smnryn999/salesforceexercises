<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>Apex Exceptions</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>Apex Exceptions</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - Can we integrate Salesforce with an external system? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
         • Certainly, Salesforce Apex can be integrated with external systems using various methods like REST, SOAP, or even calling external web services.
         • An Apex callout enables you to tightly integrate your Apex code with an external service. The callout makes a call to an external web service or sends an HTTP request from Apex code, and then receives the response.
         • Web service callouts to SOAP web services use XML, and typically require a WSDL document for code generation.
         • HTTP callouts to services typically use REST with JSON.
         • While WSDL-based callouts apply to SOAP Web services, HTTP callouts can be used with any HTTP service, either SOAP or REST.
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - Please integrate Salesforce with an external weather API to retrieve weather
        data for a given location. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          <em> // creating an Apex class to handle the integration </em>
          public with sharing class WeatherIntegration {
             public static String getWeather(String location) {
                <em> // Make an HTTP request to the external API here </em>
                <em> // Parse the response and return weather information </em>
                <em> // Example code below </em>
                String apiUrl = 'https://api.example.com/weather?location=' + location;
                HttpRequest req = new HttpRequest();
                req.setEndpoint(apiUrl);
                req.setMethod('GET');
                Http http = new Http();
                HttpResponse res = http.send(req);
                return res.getBody();
              }
           }
           <em>
             Call the External API from Apex:
             In the getWeather method, you can use the Salesforce HttpRequest and HttpResponse classes to make a GET request to the external weather API. Replace 'https://api.example.com/weather' with the actual API endpoint.
             
             Invoke the Integration in a Trigger, Controller, or Flow:
             You can invoke the WeatherIntegration.getWeather method from a trigger, custom controller, or even a Flow to retrieve weather data based on user interactions or record updates.
           </em>
        
           String location = 'San Francisco';
           String weatherData = WeatherIntegration.getWeather(location);
           <em> // Handle the weather data or display it as needed </em>
           <em>
             Handle the API Response:
             You can parse the response from the external API (in JSON, XML, or other formats) within your Apex code and use it to update Salesforce records or perform other actions as required.
             This is a simplified example of integrating Salesforce Apex with an external REST API. In a real-world scenario, you would need to handle error handling, authentication, and other considerations based on the specific API you're integrating with. Additionally, you should consider Salesforce governor limits when making external API calls.
           </em>
      </pre>
    </div>

    <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - POST Method </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        public class IntegrationClass {
          public static void postMethod(){
            <em> // Define the endpoint URL </em>
            String endpointUrl = 'https://api.example.com/resource';
          
            <em> // Create a JSON request body </em>
            String requestBody = '{"key1": "value1", "key2": "value2"}';
          
            <em> // Create an HTTP request </em>
            HttpRequest request = new HttpRequest();
            request.setEndpoint(endpointUrl);
            request.setMethod('POST');
            request.setHeader('Content-Type', 'application/json');
            request.setBody(requestBody);
          
            <em> // Create an HTTP object to send the request </em>
            Http http = new Http();
            HttpResponse response = http.send(request);
          
            <em> // Check the response </em>
            if (response.getStatusCode() == 200) {
              <em> // Successful POST request </em>
              String responseBody = response.getBody();
              System.debug('Response Body: ' + responseBody);
            }
            else {
              <em> // Error handling for non-200 status codes </em>
              System.debug('Error Status Code: ' + response.getStatusCode());
              System.debug('Error Response: ' + response.getBody());
            }
          }
        }  
        <em>
          You define the endpoint URL to which you want to make the POST request.
          Create a JSON request body as a string.
          Set up an HttpRequest object, specifying the method as POST and setting the endpoint URL and headers.
          Use the Http class to send the request.
          Check the response status code. If it's 200 (OK), you can access the response body for further processing. Otherwise, you can handle error cases appropriately.
        </em>
      </pre>
    </div>

  </section>

  <script src="examples.js"></script>

</body>

</html>