<!DOCTYPE html>
<html lang="tr">

<head>
   <meta charset="UTF-8">
   <title>OOP</title>
   <link rel="stylesheet" href="../test.css">
</head>

<body>
   <header>
      <h1>OOP Examples</h1>
   </header>

   <section>

      <!-- EXAMPLE 1 -->
      <div class="example">
        <p><span class="counter"></span> - Create a class and two constructor methods and create the instances of this class.</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // We are creating a class called Cake </em>
         <div><code>
         public class Cake {
            
             public string name;
             public integer sugar;
             public boolean cream;
            
             <em>// A constructor method without parameter </em>
             public Cake(){
                 string name;
                 integer sugar;
                 boolean cream;
             }
            
             <em>// A constructor method with parameters </em>
             public Cake(string name, integer sugar, boolean cream){
                 this.name = name;
                 this.sugar = sugar;
                 this.cream = cream;
             }
         }
         </code></div>
         <em> // And we are creating three instances </em>
            Cake orange = new Cake();
            System.debug(orange); <em> // Cake:[cream=null, name=null, sugar=null] </em>

            Cake lemon = new Cake();
            lemon.name = 'Lemon Cake';
            lemon.sugar = 15;
            lemon.cream = true;
            System.debug(lemon); <em> // Cake:[cream=true, name=Lemon Cake, sugar=15] </em>

            Cake apple = new Cake('Apple Cake', 18, true);
            System.debug(apple); <em> // Cake:[cream=true, name=Apple Cake, sugar=18] </em>
       </pre>
     </div>

     <!-- EXAMPLE 2 -->
     <div class="example">
       <p><span class="counter"></span> - Encapsulation</p>
       <button class="showSolution">Show Solution</button>
       <pre>
        <em> // We are creating a class called Cake </em>
        <div><code>
        public class Cake {
            public string name;
            public integer sugar;
            private boolean cream = true; <em> // {get; private set;} readonly </em>
         
            <em>// getter method </em>
            public boolean getCream(){
                return this.cream;
            }
         
            <em>// setter method </em>
            public void setCream(Boolean cream){
                this.cream = cream;
            }
        }
        </code></div>
        <em> // And we are creating some instances and using getCream() and setCream() methods </em>
        Cake lemon = new Cake();
        lemon.name = 'Lemon Cake';
        lemon.sugar = 15;
        System.debug(lemon); <em> // Cake:[cream=true, name=Lemon Cake, sugar=15] </em>

        System.debug(lemon.getCream()); <em> // true </em>
        lemon.setCream(false);
        System.debug(lemon.getCream()); <em> // false </em>
      
        Cake apple = new Cake('Apple Cake', 18, false);
        System.debug(apple); <em> // Cake:[cream=false, name=Apple Cake, sugar=18]</em>
       </pre>
     </div>

     <!-- EXAMPLE 3 -->
     <div class="example">
       <p><span class="counter"></span> - Inheritance</p>
       <button class="showSolution">Show Solution</button>
       <pre>
        <em> // Cake Class (Superclass)</em>
        <div><code>
        public virtual class Cake {
            public string name;
            public integer sugar=25;
            public boolean cream;
         
            public void cakeMethod(){
                System.debug('This is Cake Class');
            }
         }
         </code></div>
         <em> // Pie Class (Subclass)</em>
         <div><code>
         public class Pie extends Cake {
             public integer sugarPie = sugar;
             public void pieMethod(){
                 cakeMethod();
             }
          }
         </code></div>
          Pie cinnamon = new Pie();
          cinnamon.name = 'Cinnamon Pie'; <em> // Pie class inherits name property from Cake class </em>
          System.debug(cinnamon.sugarPie); <em> // 25 </em>
          cinnamon.pieMethod(); <em> // This is Cake Class </em>
          cinnamon.cakeMethod(); <em> // This is Cake Class </em>
          System.debug(cinnamon); <em> // Pie:[Cake.cream=null, Cake.name=Cinnamon Pie, Cake.sugar=25, sugarPie=25] </em>

          cinnamon.sugarPie = 35;
          System.debug(cinnamon.sugarPie); <em> // 35 </em>
          System.debug(cinnamon); <em> // Pie:[Cake.cream=null, Cake.name=Cinnamon Pie, Cake.sugar=25, sugarPie=35] </em>
        </pre>
      </div>

      <!-- EXAMPLE 4 -->
      <div class="example">
        <p><span class="counter"></span> - Overriding a method</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // Overriding is between two classes. It is about Polymorphism and Inheritance. </em>
         <div><code>
         public virtual class Cake {
             public string name;
             public integer sugar=25;
             public boolean cream;
            
             public virtual void cakeMethod(){ <em> // We make the method virtual to be able to be overridden </em>
                 System.debug('This is Cake Class');
             }
         }
         </code></div>
         <div><code>
         public class Pie extends Cake {
             public integer sugarPie = sugar;
             public void pieMethod(){
                 cakeMethod();
             }
            
             public override void cakeMethod(){ <em> // We override cakeMethod() </em>
                 System.debug('This is Pie Class');
             }      
         }
         </code></div>
         Pie cinnamon = new Pie();
         cinnamon.pieMethod(); <em> // This is Pie Class </em>
         cinnamon.cakeMethod(); <em> // This is Pie Class </em>
         System.debug(cinnamon); <em> // Pie:[Cake.cream=null, Cake.name=null, Cake.sugar=25, sugarPie=25] </em>
      </pre>
      </div>

      <!-- EXAMPLE 5 -->
      <div class="example">
        <p><span class="counter"></span> - Overloading a method</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // Overloading is in the same class. It is about Polymorphism. </em>
         <div><code>
         public class Calculator {
         
             <em>// Method Signature = Method Name + Parameters </em>
             public static integer addition(integer a, integer b){
                 return a + b;
             }

             public static decimal addition(integer a, decimal b){
                 return a + b;
             }

             public static decimal addition(decimal a, integer b){
                 return a + b;
             }

             public static integer addition(integer a, integer b, integer c){
                 return a + b + c;
             }

             public static integer substraction(integer a, integer b){
                 return a - b;
             }
         }
         </code></div>
          Integer sum = Calculator.addition(3, 5); 
          System.debug(sum); <em> // 8 </em>

          Decimal sum = Calculator.addition(3, 5.7);
          System.debug(sum); <em> // 8.7 </em>

          Decimal sum = Calculator.addition(3.5, 5);
          System.debug(sum); <em> // 8.5 </em>

          Integer sum = Calculator.addition(3, 5, 7);
          System.debug(sum); <em> // 15 </em>

          Integer difference = Calculator.substraction(3, 5);
          System.debug(difference); <em> // -2 </em>  
        </pre>
      </div>

      <!-- EXAMPLE 6 -->
      <div class="example">
        <p><span class="counter"></span> - Please explain static and non-static keywords with an example.</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // non-static example </em>
         <div><code>
         public virtual class Cake { <em> // Cake Class (Superclass) </em>
             public string name;
             public integer sugar = 25; <em> // sugar is non-static property </em>
             public boolean cream;   
         }

         public class Pie extends Cake { <em> // Pie Class (Subclass) </em>
             public integer sugarPie = sugar;
         }
         </code></div>
          Cake lemon = new Cake();
          System.debug(lemon.sugar); <em> // 25 </em>
            
          lemon.sugar = 30;
          System.debug(lemon.sugar); <em> // 30 </em>

          Pie cinnamon = new Pie();
          System.debug(cinnamon.sugarPie); <em> // 25 (Still)</em>

          cinnamon.sugarPie = 30;
          System.debug(cinnamon.sugarPie); <em> // 30 </em>

         <em> // static example </em>
         <div><code>
         public virtual class Cake { <em> // Cake Class (Superclass) </em>
             public string name;
             public static integer sugar = 25; <em> // Now sugar is static property </em>
             public boolean cream;   
         }

         public class Pie extends Cake { <em> // Pie Class (Subclass) </em>
             public integer sugarPie = sugar;
         }
         </code></div>
          System.debug(Cake.sugar); <em> // 25 </em>
          Cake.sugar = 30;
          System.debug(Cake.sugar); <em> // 30 </em>

          Pie cinnamon = new Pie();
          System.debug(cinnamon.sugarPie); <em> // 30 (Changed) </em>

          cinnamon.sugarPie = 35;
          System.debug(cinnamon.sugarPie); <em> // 35 </em>
        </pre>
      </div>

      <!-- EXAMPLE 7 -->
      <div class="example">
        <p><span class="counter"></span> - Abstraction</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // Shapes Class (Superclass) </em>
         <div><code>
         public abstract class Shapes {

             public abstract decimal calculateArea();
             public abstract integer calculatePerimeter();
         }
         </code></div>
         <em> // Square Class (Subclass) </em>
         <div><code>
         public class Square extends Shapes {
             integer x;
               
             public Square(integer a){ <em> // constructor method </em>
                 this.x = a;
             }
               
             public override decimal calculateArea(){
                 return x*x;
             }
               
             public override integer calculatePerimeter(){
                 return x*4;
             }
         }
         </code></div>
            Square square = new Square(5);
            System.debug(square.calculateArea()); <em> // 25 </em>
            System.debug(square.calculatePerimeter()); <em> // 20 </em>

         <em> // Triangle Class (Subclass) </em>
         <div><code>
         public class Triangle extends Shapes{

             integer x, y, z;
               
             public Triangle(integer a, integer b, integer c){ <em> // constructor method </em>
                 this.x = a;
                 this.y = b;
                 this.z = c;
             }
               
             public override decimal calculateArea(){
                 decimal s = (x+y+z)/2;
                 return Math.sqrt(s*(s-x)*(s-y)*(s-z));
             }
               
             public override integer calculatePerimeter(){
                 return x+y+z;
             }
         }
         </code></div>
            Triangle triangle = new Triangle(3,4,5);
            System.debug(triangle.calculateArea()); <em> // 6.0 </em>
            System.debug(triangle.calculatePerimeter()); <em> // 12 </em>
        </pre>
      </div>

   </section>

   <script src="examples.js"></script>

</body>

</html>
