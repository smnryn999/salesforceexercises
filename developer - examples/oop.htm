
<!DOCTYPE html>
<html lang="tr">
<head>
   <meta charset="UTF-8">
   <title>OOP</title>
   <link rel="stylesheet" href="../test.css">
</head>
<body>
   <header>
      <h1>OOP Examples</h1>
   </header>
   
   <section>

      <!-- EXAMPLE 1 -->
      <div class="example">
      <p><span class="counter"></span> - Create a class and two constructor methods and create the instances of this class.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        public class Cake {
            
            public string name;
            public integer sugar;
            public boolean cream;
            
            <em> // A constructor method without parameter </em>
            public Cake(){
                string name;
                integer sugar;
                boolean cream;
            }
            
            <em> // A constructor method with parameters </em>
            public Cake(string name, integer sugar, boolean cream){
                this.name = name;
                this.sugar = sugar;
                this.cream = cream;
            }
        }

        <em> // And we are creating three instances </em>
        Cake orange = new Cake();
        System.debug(orange); <em> // Cake:[cream=null, name=null, sugar=null] </em>

        Cake lemon = new Cake();
        lemon.name = 'Lemon Cake';
        lemon.sugar = 15;
        lemon.cream = true;
        System.debug(lemon); <em> // Cake:[cream=true, name=Lemon Cake, sugar=15] </em>

        Cake apple = new Cake('Apple Cake', 18, true);
        System.debug(apple); <em> // Cake:[cream=true, name=Apple Cake, sugar=18] </em>
      </pre>
      </div>
      
      <!-- EXAMPLE 2 -->
      <p><span class="counter"></span> - Encapsulation</p>
      <button class="showSolution">Show Solution</button>
      <pre>
      public class Cake {
         public string name;
         public integer sugar;
         private boolean cream = true; <em> // {get; private set;} readonly </em>
         
         <em> // getter method </em>
         public boolean getCream(){
            return this.cream;
         }
         
         <em> // setter method </em>
         public void setCream(Boolean cream){
            this.cream = cream;
         }
      }
      
      <em> // And we are creating some instances and using getCream() and setCream() methods </em>
      Cake lemon = new Cake();
      lemon.name = 'Lemon Cake';
      lemon.sugar = 15;
      System.debug(lemon); <em> // Cake:[cream=true, name=Lemon Cake, sugar=15] </em>

      System.debug(lemon.getCream()); <em> // true </em>
      lemon.setCream(false);
      System.debug(lemon.getCream()); <em> // false </em>
      
      Cake apple = new Cake('Apple Cake', 18, false);
      System.debug(apple); <em> // Cake:[cream=false, name=Apple Cake, sugar=18]</em>
      </pre>
      
      <!-- EXAMPLE 3 -->
      <p><span class="counter"></span> - Inheritance</p>
      <button class="showSolution">Show Solution</button>
      <pre>
      <em> // Cake Class (Superclass)</em>
        public virtual class Cake {
           public string name;
           public integer sugar=25;
           public boolean cream;
         
           public void cakeMethod(){
           System.debug('This is Cake Class');
           }
         }

      <em> // Pie Class (Subclass)</em>
        public class Pie extends Cake {
           public integer sugarPie = sugar;
           public void pieMethod(){
              cakeMethod();
           }
         }

        Pie cinnamon = new Pie();
        cinnamon.name = 'Cinnamon Pie'; <em> // Pie class inherits name property from Cake class </em>
        System.debug(cinnamon.sugarPie); <em> // 25 </em>
        cinnamon.pieMethod(); <em> // This is Cake Class </em>
        cinnamon.cakeMethod(); <em> // This is Cake Class </em>
        System.debug(cinnamon); <em> // Pie:[Cake.cream=null, Cake.name=Cinnamon Pie, Cake.sugar=25, sugarPie=25] </em>

        cinnamon.sugarPie = 35;
        System.debug(cinnamon.sugarPie); <em> // 35 </em>
        System.debug(cinnamon); <em> // Pie:[Cake.cream=null, Cake.name=Cinnamon Pie, Cake.sugar=25, sugarPie=35] </em>
      </pre>

      <!-- EXAMPLE 4 -->
      <p><span class="counter"></span> - Overriding a method</p>
      <button class="showSolution">Show Solution</button>
      <pre>
         public virtual class Cake {
            public string name;
            public integer sugar=25;
            public boolean cream;
            
            public virtual void cakeMethod(){ <em> // We make the method to be overridden virtual </em>
               System.debug('This is Cake Class');
            }
         }

         public class Pie extends Cake {
            public integer sugarPie = sugar;
            public void pieMethod(){
                cakeMethod();
            }
            
            public override void cakeMethod(){ <em> // We override cakeMethod() </em>
                System.debug('This is Pie Class');
            }      
         }

         Pie cinnamon = new Pie();
         cinnamon.pieMethod(); <em> // This is Pie Class </em>
         cinnamon.cakeMethod(); <em> // This is Pie Class </em>
         System.debug(cinnamon); <em> // Pie:[Cake.cream=null, Cake.name=null, Cake.sugar=25, sugarPie=25] </em>
      </pre>
      
   </section>
   
   <script src="examples.js"></script>
   
</body>
</html>
