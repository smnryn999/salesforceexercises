<!DOCTYPE html>
<html lang="tr">

<head>
   <meta charset="UTF-8">
   <title>The Project - Apex Part</title>
   <link rel="stylesheet" href="../test.css">
</head>

<body>
   <header>
      <h1>The Project - Apex Part</h1>
   </header>

   <section>

      <!-- EXAMPLE 1 -->
      <div class="example">
        <p><span class="counter"></span> - Creating the class that will receive data from OMDB.</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // First, we create an apex class. </em>
         <div><code>
         public class GetMovies {

         }
         </code></div>

         <em> // Then, we create a handle method that will convert the data received from the external system into Apex format. </em>
         <div><code>
         private static List<string> httpHandle(string movieName){
             movieName = movieName.replaceAll(' ', '+');
             movieName = movieName.replaceAll('&', '%26');
             string apikey;

             Http http = new Http();
             HttpRequest request = new HttpRequest();
             request.setEndpoint('http://www.omdbapi.com/?apikey='+apikey+'&t='+movieName+'&plot=full');
             request.setMethod('GET');
             request.setTimeout(500);
             HttpResponse response = http.send(request);
             System.debug(response.getStatusCode()+' and '+response.getBody());
        
             Map&lt;string,object> theMovie =(Map&lt;string,object>) JSON.deserializeuntyped(response.getBody());
        
             string title = (string)theMovie.get('Title');
             string genre = (string)theMovie.get('Genre');
             genre = genre.replaceAll(',', ';');
        
             string released = (string)theMovie.get('Released'); // "10 Oct 2012"
             string day = released.substring(0,2);
             string year = released.substringAfterLast(' ');
             string month = released.substringBetween(' ', ' ');
             switch on month {
                 when 'Jan' {month='01';}
                 when 'Feb' {month='02';}
                 when 'Mar' {month='03';}
                 when 'Apr' {month='04';}
                 when 'May' {month='05';}
                 when 'Jun' {month='06';}
                 when 'Jul' {month='07';}
                 when 'Aug' {month='08';}
                 when 'Sep' {month='09';}
                 when 'Oct' {month='10';}
                 when 'Nov' {month='11';}
                 when 'Dec' {month='12';}            
             }
             released = released == 'N/A' ? null : (day + '/' + month + '/' + year);
                
             string yearAll = (string)theMovie.get('Year');
             string writer = (string)theMovie.get('Writer');
             string imdbRating = (string)theMovie.get('imdbRating');
        
             string actors = (string)theMovie.get('Actors');
             string story = (string)theMovie.get('Plot');
             string director = (string)theMovie.get('Director');
            
             List<string> listContent = new List<string>{title, genre, released, yearAll, writer, imdbRating, actors, story, director};
             return listContent;
         }
         </code></div>

         <em> // And We are creating the method that inserts movies into the database by calling the httpHandle() method. </em>
         <div><code>
         public static void insertTheMovie(string mName){
        
            List&lt;String> listContent = httpHandle(mName);
            
            Date releasedDate = listContent[2] != null ? Date.parse(listContent[2]) : null;
            decimal imdbRatingVal = Decimal.valueOf(listContent[5]);
                
            Movies__c theMovie = new Movies__c(Name=listContent[0], Genre__c=listContent[1], Released__c = releasedDate,
                                               Writer__c = listContent[4], IMDB_Rating__c = imdbRatingVal,
                                               Actors__c = listContent[6],
                                               Story__c = listContent[7], Director__c = listContent[8]);
            insert theMovie;      
         }
         </code></div>

         <em> // We are doing the same process to save TV shows. </em>
         <div><code>
         public static void insertTheSeries(string sName){
            List&lt;String> listContent = httpHandle(sName);
            
            Date releasedDate = listContent[2] != null ? Date.parse(listContent[2]) : null;
            decimal imdbRatingVal = Decimal.valueOf(listContent[5]);
                
            Series__c theSeries = new Series__c(Name=listContent[0], Genre__c=listContent[1], Released__c = releasedDate,
                                                Year__c = listContent[3], Writer__c = listContent[4],
                                                IMDB_Rating__c = imdbRatingVal, Actors__c = listContent[6],
                                                Story__c = listContent[7], Director__c = listContent[8]);
            insert theSeries;
         }
         </code></div>

         <em> // Last view of the class: </em>
         <div><code>
         public class GetMovies {

            <em> // insertTheMovie method </em>
            public static void insertTheMovie(string mName){
        
                List&lt;String> listContent = httpHandle(mName);
              
                Date releasedDate = listContent[2] != null ? Date.parse(listContent[2]) : null;
                decimal imdbRatingVal = Decimal.valueOf(listContent[5]);
                  
                Movies__c theMovie = new Movies__c(Name=listContent[0], Genre__c=listContent[1], Released__c = releasedDate,
                                                  Writer__c = listContent[4], IMDB_Rating__c = imdbRatingVal,
                                                  Actors__c = listContent[6],
                                                  Story__c = listContent[7], Director__c = listContent[8]);
                insert theMovie;      
            }

            <em> // insertTheSeries method </em>
            public static void insertTheSeries(string sName){
              
                List&lt;String> listContent = httpHandle(sName);
              
                Date releasedDate = listContent[2] != null ? Date.parse(listContent[2]) : null;
                decimal imdbRatingVal = Decimal.valueOf(listContent[5]);
                    
                Series__c theSeries = new Series__c(Name=listContent[0], Genre__c=listContent[1], Released__c = releasedDate,
                                                  Year__c = listContent[3], Writer__c = listContent[4],
                                                  IMDB_Rating__c = imdbRatingVal, Actors__c = listContent[6],
                                                  Story__c = listContent[7], Director__c = listContent[8]);
                insert theSeries;
            }

            <em> // Handler method </em>
            private static List<string> httpHandle(string movieName){

                movieName = movieName.replaceAll(' ', '+');
                movieName = movieName.replaceAll('&', '%26');
                string apikey;
 
                Http http = new Http();
                HttpRequest request = new HttpRequest();
                request.setEndpoint('http://www.omdbapi.com/?apikey='+apikey+'&t='+movieName+'&plot=full');
                request.setMethod('GET');
                request.setTimeout(500);
                HttpResponse response = http.send(request);
                System.debug(response.getStatusCode()+' and '+response.getBody());
         
                Map&lt;string,object> theMovie =(Map&lt;string,object>) JSON.deserializeuntyped(response.getBody());
          
                string title = (string)theMovie.get('Title');
                string genre = (string)theMovie.get('Genre');
                genre = genre.replaceAll(',', ';');
          
                string released = (string)theMovie.get('Released'); // "10 Oct 2012"
                string day = released.substring(0,2);
                string year = released.substringAfterLast(' ');
                string month = released.substringBetween(' ', ' ');
                switch on month {
                    when 'Jan' {month='01';}
                    when 'Feb' {month='02';}
                    when 'Mar' {month='03';}
                    when 'Apr' {month='04';}
                    when 'May' {month='05';}
                    when 'Jun' {month='06';}
                    when 'Jul' {month='07';}
                    when 'Aug' {month='08';}
                    when 'Sep' {month='09';}
                    when 'Oct' {month='10';}
                    when 'Nov' {month='11';}
                    when 'Dec' {month='12';}            
                }
                released = released == 'N/A' ? null : (day + '/' + month + '/' + year);
                 
                string yearAll = (string)theMovie.get('Year');
                string writer = (string)theMovie.get('Writer');
                string imdbRating = (string)theMovie.get('imdbRating');
          
                string actors = (string)theMovie.get('Actors');
                string story = (string)theMovie.get('Plot');
                string director = (string)theMovie.get('Director');
              
                List<string> listContent = new List<string>{title, genre, released, yearAll, writer, imdbRating, actors, story, director};
                return listContent;
            }

         }
         </code></div>

         <em> // Now, we can add some movies and TV shows to the UI. </em>
         <div><code>
         GetMovies.insertTheMovie('Gladiator');
         GetMovies.insertTheMovie('Secret Window');
         GetMovies.insertTheSeries('Pretty Little Liars');
         GetMovies.insertTheSeries('Veronica Mars');
         </code></div>
       </pre>
     </div>

     <!-- EXAMPLE 2 -->
     <div class="example">
       <p><span class="counter"></span> - Creating the class that will receive data from Open Library.</p>
       <button class="showSolution">Show Solution</button>
       <pre>
        <em> // We are creating a class called GetBooks. This class has a method called getBook() that retrieves data from Open Library and convert them to Apex format. And then a Book__c record is created according to the retreiving data.</em>
        <div><code>
        public class GetBooks {
            @AuraEnabled
            public static void getBook(String bookName, String authorName){
                
                bookName = bookName.trim().replaceAll(' ', '+');
                authorName = authorName.trim().replaceAll(' ', '+');
                
                <em> // retreiving data </em>
                Http http = new Http();
                HttpRequest request = new HttpRequest();
                request.setEndpoint('https://openlibrary.org/search.json?title='+bookName+'&author='+authorName);
                request.setMethod('GET');
                request.setHeader('content-type', 'application/json');
                <em> // request.setHeader('authorization', 'apikey 1234567890abcdef'); </em>
                HttpResponse response = http.send(request);
                <em> // System.debug(response.getStatusCode() + ' and ' + response.getBody()); </em>
                
                <em> // converting data </em>
                Map&lt;String, Object> theBook =(Map&lt;String, Object>) JSON.deserializeuntyped(response.getBody());
                       
                List&lt;Object> documentsList = (List&lt;Object>)theBook.get('docs');
                Map&lt;String, Object> documentsMap = (Map&lt;String, Object>)documentsList[0];
                
                String title = (String)documentsMap.get('title');
                Object[] author = (Object[])documentsMap.get('author_name');
                String first_publish_year = String.valueOf(documentsMap.get('first_publish_year'));
                Object[] publishDate = (Object[])documentsMap.get('publish_date');
                Object[] language = (Object[])documentsMap.get('language');
                Object[] persons = (Object[])documentsMap.get('person');
                Object[] timeOfStory = (Object[])documentsMap.get('time');
                Integer number_of_pages = (Integer)documentsMap.get('number_of_pages_median');
                Decimal rating = (Decimal)documentsMap.get('ratings_average');
               
                System.debug(title+', '+author[0]+', '+publishDate[0] + ', '+ first_publish_year);
                System.debug(language); 
                System.debug(persons);  
                System.debug(timeOfStory); 
                System.debug(number_of_pages + ', ' + rating); 
                
                String textPersons='';
                if(persons != null){
                    for(Object p:persons){
                        textPersons += (String)p + ', ';
                    }
                }
                
                String textTime='';
                if(timeOfStory != null){
                    for(Object t:timeOfStory){
                        textTime += (String)t;
                    }
                }
                
                <em> // creating record </em>
                Book__c book = new Book__c();
                book.Name = title;
                book.Author__c = (String)author[0];
                book.First_Publish_Year__c = first_publish_year;
                book.Language__c = language != null ? (String)language[0] : null;
                book.Fictitious_Characters__c = textPersons.substringBeforeLast(',');
                book.When_the_Story_Takes_Place__c = textTime;
                book.Number_Of_Pages__c = number_of_pages;
                book.Rating__c = rating;
                insert book;
            }
        }
        </code></div>
         <em> // Now, we can add some books to the UI. </em>
         <div><code>
         GetBooks.getBook('To Kill a Mockingbird', 'Harper Lee');
         GetBooks.getBook('Baudolino', 'Umberto Eco');
         GetBooks.getBook('Madame Bovary', 'Gustave Flaubert');
         </code></div>     
       </pre>
     </div>

     <!-- EXAMPLE 3 -->
     <div class="example">
        <p><span class="counter"></span> - Handling data renewal processes every month to keep the data up-to-date.</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // We are creating a class called GetBooks. This class has a method called getBook() that retrieves data from Open Library and convert them to Apex format. And then a Book__c record is created according to the retreiving data.</em>
         <div><code>
         public class GetBooks {
             
         }
         </code></div>
          <em> // Now, we can add some books to the UI. </em>
          <div><code>
          GetBooks.getBook('To Kill a Mockingbird', 'Harper Lee');
          GetBooks.getBook('Baudolino', 'Umberto Eco');
          GetBooks.getBook('Madame Bovary', 'Gustave Flaubert');
          </code></div>     
        </pre>
      </div>

   </section>

   <script src="examples.js"></script>

</body>

</html>
