<!DOCTYPE html>
<html lang="tr">

<head>
   <meta charset="UTF-8">
   <title>The Project - LWC Part</title>
   <link rel="stylesheet" href="../test.css">
</head>

<body>
   <header>
      <h1>The Project - LWC Part</h1>
   </header>

   <section>

     <!-- EXAMPLE 1 -->
     <div class="example">
        <p><span class="counter"></span> - Creating a component where we can add movies, TV series and books to the database from the home page.</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // We will create a component that has inputs as the picture.</em>

         <img src="../pictures/screens/search.png" alt="">

         <em> // Next are HTML, CSS, JS and XML codes.</em>

         <em> // homeSearch.js-meta.xml </em>
         <div><code>
         &lt;?xml version="1.0" encoding="UTF-8"?>
         &lt;LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
             &lt;apiVersion>56.0&lt;/apiVersion>
             &lt;isExposed>true&lt;/isExposed>
             &lt;targets>
                 &lt;target>lightning__RecordPage&lt;/target>
             &lt;/targets>
         &lt;/LightningComponentBundle>
         </code></div>

         <em> // homeSearch.html </em>
         <div><code>
         &lt;template>

            &lt;lightning-card title="Save a Movie, a TV Show or a Book" icon-name="standard:article">
                &lt;div class="slds-m-around_medium">
                    &lt;lightning-input label="Enter a Movie Name" onchange={getMovieName}>&lt;/lightning-input>
                    &lt;lightning-button label="Get Movie" onclick={saveMovie}>&lt;/lightning-button>
                &lt;/div>
                &lt;div class="slds-m-around_medium">
                    &lt;lightning-input label="Enter a TV Show Name" onchange={getTVShowName}>&lt;/lightning-input>
                    &lt;lightning-button label="Get TV Show" onclick={saveTVShow}>&lt;/lightning-button>
                &lt;/div>
                &lt;div class="slds-m-around_medium">
                    &lt;div class="slds-grid slds-gutters">
                        &lt;div class="slds-col">&lt;lightning-input label="Enter a Book Name" onchange={getBookName} width="50%">&lt;/lightning-input>&lt;/div>
                        &lt;div class="slds-col">&lt;lightning-input label="Enter the Author Name" onchange={getAuthorName}>&lt;/lightning-input>&lt;/div>
                    &lt;/div>
                    
                    &lt;lightning-button label="Get Book" onclick={saveBook}>&lt;/lightning-button>
                &lt;/div>
            &lt;/lightning-card>

         &lt;/template>
         </code></div>
         <em> // homeSearch.css </em>
         <div><code>
         lightning-button {
            display: block;
            margin-top: 10px;
         }
         </code></div>
         <em> // homeSearch.js </em>
         <div><code>
         import { LightningElement } from 'lwc';
         import insertTheMovie from "@salesforce/apex/GetMovies.insertTheMovie";
         import insertTheSeries from "@salesforce/apex/GetMovies.insertTheSeries";
         import insertBook from "@salesforce/apex/GetBooks.getBook";
         import { ShowToastEvent } from 'lightning/platformShowToastEvent';
            
         export default class HomePage extends LightningElement {
            
             movieName = "";
             showName = "";
             bookName = "";
             authorName = "";
            
             <em>// Movie</em>
             getMovieName(event){
                 this.movieName = event.target.value;
             }
            
             saveMovie(){
                 console.log(this.movieName);
                 insertTheMovie({mName:this.movieName})
                 .then(()=>{
                     const event = new ShowToastEvent({
                         title: 'Success',
                         message: this.movieName + ' has been created successfully.',
                         variant: "success"
                     });
                     this.dispatchEvent(event);
                 })
                 .catch(()=>{
                     const event = new ShowToastEvent({
                         title: 'Error',
                         message: 'There is a problem.',
                         variant: "error"
                     });
                     this.dispatchEvent(event);
                 });
             }
            
             <em>// TV Show</em>
             getTVShowName(event){
                 this.showName = event.target.value;
             }
            
             saveTVShow(){
                 console.log(this.showName);
                 insertTheSeries({sName:this.showName})
                 .then(()=>{
                     const event = new ShowToastEvent({
                         title: 'Success',
                         message: this.showName + ' has been created successfully.',
                         variant: "success"
                     });
                     this.dispatchEvent(event);
                 })
                 .catch(()=>{
                     const event = new ShowToastEvent({
                         title: 'Error',
                         message: 'There is a problem.',
                         variant: "error"
                     });
                     this.dispatchEvent(event);
                 });
             }
        
             <em>// Book</em>
             getBookName(event){
                 this.bookName = event.target.value;
             }
             getAuthorName(event){
                 this.authorName = event.target.value;
             }
        
             saveBook(){
                 console.log(this.bookName);
                 insertBook({bookName: this.bookName, authorName: this.authorName})
                 .then(()=>{
                     const event = new ShowToastEvent({
                         title: 'Success',
                         message: this.bookName + ' has been created successfully.',
                         variant: "success"
                     });
                     this.dispatchEvent(event);
                 })
                 .catch(()=>{
                     const event = new ShowToastEvent({
                         title: 'Error',
                         message: 'There is a problem.',
                         variant: "error"
                     });
                     this.dispatchEvent(event);
                 });
             }
         }
         </code></div>     
        </pre>
      </div>

      <!-- EXAMPLE 2 -->
     <div class="example">
        <p><span class="counter"></span> - Creating top list and select randomly constructor.</p>
        <button class="showSolution">Show Solution</button>
        <pre>
         <em> // We will create a component that has inputs as the picture.</em>

         <img src="../pictures/screens/search.png" alt="">

         <em> // Next are HTML, CSS, JS and XML codes.</em>

         <em> // homeSearch.js-meta.xml </em>
         <div><code>
         
         </code></div>

         
         <em> // homeSearch.css </em>
         <div><code>
         lightning-button {
            display: block;
            margin-top: 10px;
         }
         </code></div>
        </pre>
      </div>

   </section>

   <script src="examples.js"></script>

</body>

</html>
