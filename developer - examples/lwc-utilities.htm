for:each, iterator:it, ShowToastEvent, NavigationMixin
<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>LWC Utilities</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>LWC Utilities</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - How can we handle conditional rendering in HTML file? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Salesforce Lightning Web Components (LWC), "if:true" and "if:false" directives are used to conditionally render elements based on the evaluation of an expression. </em>
        
        <em> // Let's say we have an LWC component that displays a message only if a certain condition is met. We can use the if:true or if:false directive to achieve this. </em>
        <div><code>
        <em>&lt;!-- conditionsExample.html --></em>
        &lt;template>
            &lt;lightning-card title="Conditional Rendering Example">
                &lt;template if:true={showMessage}>
                    &lt;div class="message">This message is displayed because showMessage is true.&lt;/div>
                &lt;/template>
                &lt;template if:false={showMessage}>
                    &lt;div class="message">This message is hidden because showMessage is false.&lt;/div>
                &lt;/template>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // We are giving showMessage value in JS file. </em>
        <div><code>
        <em>// conditionsExample.js</em>
        import { LightningElement, api } from 'lwc';

        export default class ConditionsExample extends LightningElement {
            showMessage = true;
        }
        </code></div>
        
        <em>
          // In this example, the component contains a card with two templates. The first template, with if:true, will render its content only if the showMessage property is true.
          // The second template, with if:false, will render its content only if the showMessage property is false.
          // We would typically control the showMessage property based on our application logic or user input. When showMessage is set to true, the first message will be displayed; otherwise, the second message will be hidden.
          // This allows us to conditionally render parts of our LWC component based on the state of our data or user interactions.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - How can we handle conditional rendering for multiple tags in HTML file? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Salesforce Lightning Web Components (LWC), "lwc:if", "lwc:ifelse" and "lwc:else" directives are used to conditionally render elements based on the evaluation of an expression. </em>
        
        <em> // Let's say we have an LWC component that displays multiple messages only if some certain conditions are met. We can use the "lwc:if", "lwc:ifelse" and "lwc:else" directives to achieve this. </em>
        <div><code>
        <em>&lt;!-- conditionsExample.html --></em>
        &lt;template>
            &lt;template lwc:if={property1}> Statement1 </template>
            &lt;template lwc:elseif={property2}> Statement2 </template>
            &lt;template lwc:else> Statement3 </template>
        &lt;/template>
        </code></div>        
        <em>
          // Only one of the three statements renders:
          // Statement1 renders if property1 is true.
          // Statement2 renders if property1 is false and property2 is true.
          // Statement3 renders if property1 and property2 are false.
          // Although the example uses all three directives, lwc:elseif and lwc:else are optional.
        </em>
        <em> // We can use only lwc:if </em>
        <div><code>
        &lt;template>
            &lt;template lwc:if={property}> Statement </template>
        &lt;/template>
        </code></div>
        <em> // Statement renders if property is true.</em>
      </pre>
  </div>
    
  </section>

  <script src="examples.js"></script>

</body>
</html>
