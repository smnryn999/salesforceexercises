NavigationMixin
<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>LWC Utilities</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>LWC Utilities</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - How can we handle conditional rendering in HTML file? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), "if:true" and "if:false" directives are used to conditionally render elements based on the evaluation of an expression. </em>
        
        <em> // Let's say we have an LWC component that displays a message only if a certain condition is met. We can use the if:true or if:false directive to achieve this. </em>
        <div><code>
        <em>&lt;!-- conditionsExample.html --></em>
        &lt;template>
            &lt;lightning-card title="Conditional Rendering Example">
                &lt;template if:true={showMessage}>
                    &lt;div class="message">This message is displayed because showMessage is true.&lt;/div>
                &lt;/template>
                &lt;template if:false={showMessage}>
                    &lt;div class="message">This message is hidden because showMessage is false.&lt;/div>
                &lt;/template>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // We are giving showMessage value in JS file. </em>
        <div><code>
        <em>// conditionsExample.js</em>
        import { LightningElement } from 'lwc';

        export default class ConditionsExample extends LightningElement {
            showMessage = true;
        }
        </code></div>
        
        <em>
          // In this example, the component contains a card with two templates. The first template, with if:true, will render its content only if the showMessage property is true.
          // The second template, with if:false, will render its content only if the showMessage property is false.
          // We would typically control the showMessage property based on our application logic or user input. When showMessage is set to true, the first message will be displayed; otherwise, the second message will be hidden.
          // This allows us to conditionally render parts of our LWC component based on the state of our data or user interactions.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - How can we handle conditional rendering for multiple tags in HTML file? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), "lwc:if", "lwc:ifelse" and "lwc:else" directives are used to conditionally render elements based on the evaluation of an expression. </em>
        
        <em> // Let's say we have an LWC component that displays multiple messages only if some certain conditions are met. We can use the "lwc:if", "lwc:ifelse" and "lwc:else" directives to achieve this. </em>
        <div><code>
        <em>&lt;!-- conditionsExample.html --></em>
        &lt;template>
            &lt;template lwc:if={property1}> Statement1 &lt;/template>
            &lt;template lwc:elseif={property2}> Statement2 &lt;/template>
            &lt;template lwc:else> Statement3 &lt;/template>
        &lt;/template>
        </code></div>        
        <em>
          // Only one of the three statements renders:
          // Statement1 renders if property1 is true.
          // Statement2 renders if property1 is false and property2 is true.
          // Statement3 renders if property1 and property2 are false.
          // Although the example uses all three directives, lwc:elseif and lwc:else are optional.
        </em>
        <em> // We can use only lwc:if </em>
        <div><code>
        &lt;template>
            &lt;template lwc:if={property}> Statement &lt;/template>
        &lt;/template>
        </code></div>
        <em> // Statement renders if property is true.</em>
      </pre>
  </div>

  <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - Please  create a component that contains a checkbox and a text. When the checkbox is checked, the text area is displayed.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em>  </em>
        <div><code>
        <em>&lt;!-- showDetails.html --></em>
        &lt;template>
            &lt;lightning-card title="Contract" icon-name="standard:contract">    
                &lt;lightning-input type="checkbox" label="Show Details" onchange={handleChange}>&lt;/lightning-input>

                &lt;template lwc:if={display}>
                    &lt;p>
                        &lt;b>Contract details:&lt;/b> &lt;br>
                        Lorem ipsum dolor sit amet consectetur adipiscing elit sed do eiusmodtempor
                        incididunt ut labore et dolore magna aliqua.
                    &lt;/p>
                &lt;/template>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>        
        <div><code>
        <em>// showDetails.js </em>
        import { LightningElement } from 'lwc';
          
        export default class ShowDetails extends LightningElement {
   
            display = false; <em>// Contract details doesn't appear as default </em>

            handleChange(event){
                this.display = event.target.checked; <em>// checked is used in checkboxes to get value. </em>
            }
        }
        </code></div>
        <em>
          // We created a lightning-input whose type is checkbox and an onchange event that runs handleChange function when checkbox value changes.
          // handleChange function assigns true or false value to display variable dynamically.
          // Contact details appears when "display" is true.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 4 -->
    <div class="example">
      <p><span class="counter"></span> - Please create an array and iterate it as an unordered list in HTML file. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), the for:each directive is used for iterating over a list of items and rendering elements for each item in the list. </em>
        
        <em> // Let's say we have a list of countries, and we want to display each country's name and currency in an LWC component. We can use the for:each directive to achieve this. </em>
        <div><code>
        <em>&lt;!-- countryList.html --></em>
        &lt;template>
            &lt;lightning-card title="Country List">
                &lt;ul>
                    &lt;template for:each={countries} for:item="country">
                        &lt;li key={country.id}>
                            {country.name}, {country.currency}
                        &lt;/li>
                    &lt;/template>
                &lt;/ul>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>       
        <div><code>
        <em>// countryList.js</em>
        import { LightningElement } from 'lwc';

        export default class CountryList extends LightningElement {
            countries = [{id:1, name:"Spain", currency:"Euro"},
                         {id:2, name:"Japan", currency:"Yen"},
                         {id:3, name:"Australia", currency:"Dolar"},
                         {id:4, name:"Singapur", currency:"Dolar"}];
        }
        </code></div>     
        <em>
          // In this example, we have a component that displays a list of countries. The countries is an array, and we use the for:each directive to iterate over each country in the list.
          // For each country, we render an &lt;li> element containing the country's name and currency.
          // The key attribute is used to uniquely identify each rendered element to help with efficient updates when the list of countries changes.
          // We retrieved the data that is countries array from JS file. This allows us to dynamically render a list of items based on our data.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 5 -->
    <div class="example">
      <p><span class="counter"></span> - Please create an array and iterate it as an unordered list in HTML file via iterator:it. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), the iterator:it directive is used for iterating over a list of items and rendering elements for each item in the list. </em>
        
        <em> // Let's say we have a list of countries, and we want to display each country's name and currency in an LWC component. We can use the iterator:it directive to achieve this. </em>
        <div><code>
        <em>&lt;!-- countryList.html --></em>
        &lt;template>
            &lt;lightning-card title="Country List">
                &lt;ul>
                    &lt;template iterator:it={countries}>
                        &lt;li key={it.value.id}>
                            {it.value.name}, {it.value.currency}
                        &lt;/li>
                    &lt;/template>
                &lt;/ul>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>       
        <div><code>
        <em>// countryList.js</em>
        import { LightningElement } from 'lwc';

        export default class CountryList extends LightningElement {
            countries = [{id:1, name:"Spain", currency:"Euro"},
                         {id:2, name:"Japan", currency:"Yen"},
                         {id:3, name:"Australia", currency:"Dolar"},
                         {id:4, name:"Singapur", currency:"Dolar"}];
        }
        </code></div>     
        <em>
          // In this example, we have a component that displays a list of countries. The countries is an array, and we use the iterator:it directive to iterate over each country in the list.
          // For each country, we render an &lt;li> element containing the country's name and currency.
          // The key attribute is used to uniquely identify each rendered element to help with efficient updates when the list of countries changes.
          // We retrieved the data that is countries array from JS file. This allows us to dynamically render a list of items based on our data.
        </em>

        <em> // Also we can get only first and last element in iterator:it loop.</em>
        <div><code>
        <em>&lt;!-- countryList.html --></em>
        &lt;template>
            &lt;lightning-card title="First and Last Country">
                &lt;ul>
                    &lt;template iterator:it={countries}>
                        &lt;li key={it.value.id} if:true={it.first}>{it.value.name}, {it.value.currency}&lt;/li>
                        &lt;li key={it.value.id} if:true={it.last}>{it.value.name}, {it.value.currency}&lt;/li>
                    &lt;/template>
                &lt;/ul>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em>
          // it.first returns true when the first element comes and it.last returns true when the last element comes.
          // So, the output will be like this: 
          Spain, Euro
          Singapur, Dolar
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 6 -->
    <div class="example">
      <p><span class="counter"></span> - After a save operation is completed, show a short success message on the screen. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // We can use the toastEvent to show toast messages to the user. Toast messages are pop-up notifications that provide information, warning, or success messages. </em>
        <div><code>
        <em>&lt;!-- accountCreator.html --></em>
        &lt;template>
            &lt;lightning-card>
                &lt;lightning-record-form 
                    object-api-name={objectApiName}
                    fields={fields} 
                    onsuccess={handleSuccess}>
                &lt;/lightning-record-form>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <div><code>
        <em>// accountCreator.js</em>
        import { LightningElement } from 'lwc';
        import { ShowToastEvent } from 'lightning/platformShowToastEvent'; <em>// First, we should import ShowToastEvent </em>

        export default class AccountCreator extends LightningElement {
            handleSuccess(event) {
                <em>// Create a toast event </em>
                const toastEvent = new ShowToastEvent({
                    title: "Account created",
                    message: "Record ID: " + event.detail.id,
                    variant: "success"
                });
                <em>// Dispatch the event </em>
                this.dispatchEvent(toastEvent);
            }
        }
        </code></div>
        <em>
          // In this example, we have an LWC component with a handleSuccess method. When we call this method, it creates a ShowToastEvent with a title, message, and variant.
          // The variant can be 'success', 'warning', 'error', or 'info', depending on the type of message we want to display.
          // To show the toast message, we would typically call the handleSuccess method in response to user actions or certain events in our component's logic.
          // In this case, the handleSuccess method are called by onsuccess event that represents saving an account successfully.
          // We can also customize the ShowToastEvent with additional properties and options. This is a common way to provide feedback and notifications to users in LWC.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 7 -->
    <div class="example">
      <p><span class="counter"></span> - How to link a record page or different pages in LWC? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // The NavigationMixin is a module in Lightning Web Components (LWC) that allows us to navigate to different pages and record views within Salesforce. </em>
        <div><code>
        <em>&lt;!-- getAccounts.html --></em>
        &lt;template>
            &lt;lightning-card title="Account List" icon-name="standard:account">
                &lt;ul>
                    &lt;template for:each={accounts} for:item="acc">
                        &lt;li key={acc.id}>
                            &lt;a name={acc.id} onclick={navigateToAccountPage}>{acc.Name}&lt;/a>, {acc.Industry}
                        &lt;/li>
                    &lt;/template>
                &lt;/ul>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <div><code>
        <em>// getAccounts.js </em>
        import { LightningElement, wire} from 'lwc';
        import getAccounts from '@salesforce/apex/AccountController.getAccounts';
        import { NavigationMixin } from 'lightning/navigation';
 
        export default class ChildAccount extends NavigationMixin(LightningElement) {
 
            @wire(getAccounts) accounts;
 
            navigateToAccountPage(event) {
                var recId = event.target.name; <em>// We are getting Id value dynamically </em>
                this[NavigationMixin.Navigate]({
                    type: 'standard__recordPage',
                    attributes: {
                        recordId: recId,
                        objectApiName: 'Account', <em>// objectApiName is optional </em>
                        actionName: 'view' <em>// If we write "home" it takes us to listview </em>
                    }
                });
            }
        }
        </code></div>
        <em>
          // 
        </em>
      </pre>
    </div>
  </section>

  <script src="examples.js"></script>

</body>
</html>
