<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>LWC Communications</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>LWC Communications</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - What is LWC? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <span class="string">
        • Lightning Web Components (LWC) are custom HTML elements built using HTML and modern JavaScript.
        • Lightning Web Components (LWC) uses core Web Components standards and provides only what’s necessary to perform well in browsers supported by Salesforce. Because it’s built on code that runs natively in browsers, Lightning Web Components is lightweight and delivers exceptional performance. Most of the code you write is standard JavaScript and HTML.
        • Lightning Web Components (LWC) are a fundamental building block in Salesforce's Lightning Platform for building user interface (UI).
        </span>
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - Please create an example sending data from a parent component to a child component.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), we can pass data from a parent component to a child component by using component attributes. </em>
        
        <em> &lt;!-- parentComponent.html --> </em>
        <div><code>
        <em>&lt;!-- parentComponent.html --> </em>
        &lt;template>
            &lt;lightning-card title="Parent Component">
                &lt;c-child-component message={parentMessage}>&lt;/c-child-component>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>  
        <em> // parentComponent.js </em>
        <div><code>
        <em>// parentComponent.js </em>
        import { LightningElement } from 'lwc';

        export default class ParentComponent extends LightningElement {
            parentMessage = 'Hello from Parent!';

            <em>// You can set the initial value of parentMessage here or dynamically update it. </em>
        }
        </code></div>
        <em> &lt;!-- childComponent.html --> </em>
        <div><code>
        <em>&lt;!-- childComponent.html --> </em>
        &lt;template>
            &lt;lightning-card title="Child Component">
                &lt;p>{message}&lt;/p>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // childComponent.js </em>
        <div><code>
        <em>// childComponent.js </em>
        import { LightningElement, api } from 'lwc';

        export default class ChildComponent extends LightningElement {
            @api message;
        }
        </code></div>
        <em>
          // The parent component (parentComponent) defines a property called parentMessage and sets its initial value to 'Hello from Parent!'. This property is passed to the child component using the message attribute.
          // The child component (childComponent) uses the @api decorator to define an attribute called message. This attribute receives the value from the parent component and displays it in the child component's template.
          // When you include the parent component in your Lightning App, it will render the child component with the message sent from the parent component. This demonstrates how data can be sent from a parent to a child component in LWC using component attributes.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - Please create an example sending data from a child component to a parent component.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), we can send data from a child component to a parent component using custom events. </em>
        
        <em> &lt;!-- parentComponent.html --> </em>
        <div><code>
        <em>&lt;!-- parentComponent.html --> </em>
        &lt;template>
            &lt;lightning-card title="Parent Component">
                &lt;c-child-component onchildmessage={handleChildMessage}>&lt;/c-child-component>
                &lt;p>Message from Child: {childMessage}&lt;/p>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>  
        <em> // parentComponent.js </em>
        <div><code>
        <em>// parentComponent.js </em>
        import { LightningElement } from 'lwc';
          
        export default class ParentComponent extends LightningElement {
            childMessage = '';

            handleChildMessage(event) {
                this.childMessage = event.detail;
            }
        }
        </code></div>
        <em> &lt;!-- childComponent.html --> </em>
        <div><code>
        <em>&lt;!-- childComponent.html --> </em>
        &lt;template>
            &lt;lightning-card title="Child Component">
                &lt;lightning-button label="Send Message to Parent" onclick={sendMessageToParent}>&lt;/lightning-button>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // childComponent.js </em>
        <div><code>
        <em>// childComponent.js </em>
        import { LightningElement, createEvent } from 'lwc';

        export default class ChildComponent extends LightningElement {
            sendMessageToParent() {
                const childMessageEvent = createEvent('childmessage');
                childMessageEvent.detail = 'Hello from Child Component!';
                this.dispatchEvent(childMessageEvent);
            }
        }
        </code></div>
        <em>
          // The child component (childComponent) uses the createEvent function to create a custom event named 'childmessage'. It sets the event's detail property to the message that it wants to send to the parent component.
          // When the "Send Message to Parent" button is clicked, the child component dispatches the custom event using this.dispatchEvent(childMessageEvent).
          // The parent component (parentComponent) listens for the 'childmessage' event using the onchildmessage attribute on the child component tag. When the event is fired, it calls the handleChildMessage method to update the childMessage property with the message sent from the child component.
          // This demonstrates how data can be sent from a child to a parent component in LWC using custom events..
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 4 -->
    <div class="example">
      <p><span class="counter"></span> - Please explain what is slot in LWC with an example.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), we can use slots to create flexible and reusable components. Slots allow us to pass content and components from a parent component to a child component. </em>
        
        <em> &lt;!-- parentComponent.html --> </em>
        <div><code>
        <em>&lt;!-- parentComponent.html --> </em>
        &lt;template>
            &lt;lightning-card title="Parent Component">
                &lt;c-child-component>
                    &lt;p>This is content placed in the parent component.&lt;/p>
                &lt;/c-child-component>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> &lt;!-- childComponent.html --> </em>
        <div><code>
        <em>&lt;!-- childComponent.html --> </em>
        &lt;template>
            &lt;lightning-card title="Child Component">
                &lt;slot>&lt;/slot>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em>
          // The parent component (parentComponent) includes the child component (c-child-component) and places a <p> element with content inside it.
          // The child component (childComponent) uses a <slot> element to specify where the content from the parent component will be inserted.
          // In this case, the content placed within the <c-child-component> tags will be inserted where the <slot> is defined.
          // When we include the parent component in our Lightning App, it will render the child component with the content from the parent component placed within it.
          // This demonstrates how slots can be used to pass and render content from a parent to a child component, making our components more versatile and reusable.
        </em>
      </pre>
    </div>
    
  </section>

  <script src="examples.js"></script>

</body>

</html>
