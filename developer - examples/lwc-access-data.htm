<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>LWC Access Data</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>Access Data Examples</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - Can we access database in LWC? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <span class="string">
        • Certainly, In Lightning Web Components (LWC), there are several ways to access the database, primarily for querying and manipulating records.
        • We can use some custom tags to access data, such as lightning-record-form, lightning-record-edit-form, lightning-record-view-form.
        • We can use wire adapters and functions to access data, such as createRecord, updateRecord, and deleteRecord functions in the lightning/ui*Api.
        • We can use Apex classes and methods to access data.
        • Lightning web components can import methods from Apex classes. The imported methods are functions that the component can call either via @wire or imperatively.
        • We can query Salesforce data using SOQL-like queries with functionalities like filtering and data aggregation, with the GraphQL wire adapter.
        </span>
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - Please create an editable form that manipulates the database via lightning-record-form. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // The lightning-record-form component is a powerful tool for rendering and editing records in Lightning Web Components (LWC). </em>
        
        <em> &lt;!-- recordForm.html --> </em>
        <div><code>
        <em>&lt;!-- recordForm.html --> </em>
        &lt;lightning-record-form
            object-api-name={objectApiName}
            record-id={recordId}
            fields={fields}
            columns="2"
        >
        &lt;/lightning-record-form>
        </code></div>  
        <em> // recordForm.js </em>
        <div><code>
        <em>// recordForm.js </em>
        import { LightningElement, api } from 'lwc';
        import NAME_FIELD from '@salesforce/schema/Account.Name';
        import INDUSTRY from '@salesforce/schema/Account.Industry';

        export default class RecordFormExample extends LightningElement {
            <em>// Expose a field to make it available in the template </em>
            fields = [NAME_FIELD, INDUSTRY];

            <em>// Flexipage provides recordId and objectApiName </em>
            @api recordId;
            @api objectApiName;
        }
        </code></div>
        <em>
          // In this example, the form uses the object API name and record ID of the record page it's placed in.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - Please explain how to use the deleteRecord method.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), The deleteRecord method is used to delete a record. </em>

        <em> // we create a button that, when clicked, triggers the record deletion: </em>
        <div><code>
        <em>&lt;!-- deleteRecordExample.html --></em>
        &lt;template>
            &lt;lightning-card title="Delete Record Example">
                &lt;div class="slds-m-around_medium">
                    &lt;p>Delete the Record:&lt;/p>
                    &lt;lightning-button label="Delete" variant="destructive" onclick={deleteLead}>&lt;/lightning-button>
                &lt;/div>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // we import the deleteRecord method and use it to delete a specific record. </em>
        <div><code>
        <em>// deleteRecordExample.js</em>
        import { LightningElement } from 'lwc';
        import { deleteRecord } from 'lightning/uiRecordApi';
          
        export default class DeleteRecordExample extends LightningElement {
            <em>// Specify the record Id that you want to delete</em>
            recordId = '0012x00000abcdeFAA';

            deleteLead() {
                deleteRecord(this.recordId)
                    .then(() => {
                        <em>// Record deleted successfully</em>
                        console.log('Record deleted successfully');
                    })
                    .catch(error => {
                        <em>// Handle the error</em>
                        <span class="key">console.error</span>('Error deleting record:', error);
                    });
            }
        }
        </code></div>    
        <em>
          // The deleteRecordExample component includes a button that, when clicked, calls the deleteRecord method.
          // The deleteRecord method is imported from the lightning/uiRecordApi. It takes the record Id as a parameter and returns a promise.
          // When the promise is resolved, it indicates that the record has been deleted successfully. We can place any further actions or UI updates within the then block.
          // If there's an error, we can handle it in the catch block. This can include showing an error message or performing other actions as needed.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 4 -->
    <div class="example">
      <p><span class="counter"></span> - Please bring and display the records of custom Book_c object on the UI via wire method.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), wire adapters are used to retrieve data from Salesforce objects and fields. </em>
        
        <em> // An example of using a wire adapter to fetch records from a custom Book__c object. </em>
        <em> // BookController class</em>
        <div><code>
        <em>// BookController.cls</em>
        public class BookController {
            @AuraEnabled(cacheable=true)
            public static List<Book__c> getBookRecords(){
                return [SELECT Name, Author__c FROM Book__c];
            }
        }
        </code></div>
        <em> // In HTML, we can use for:each loop to render the list that @wire returns: </em>
        <div><code>
        <em>&lt;!-- wireExample.html --></em>
        &lt;template>
            &lt;lightning-card title="Wire Adapter Example">
                &lt;div class="slds-m-around_medium">
                    &lt;p>Records from Book__c:&lt;/p>
                    &lt;template for:each={bookRecords.data} for:item="book">
                        &lt;p key={book.Id}>{book.Name}, {book.Author__c}&lt;/p>
                    &lt;/template>
                &lt;/div>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // we import the wire adapter from "lwc" to be able to use it. </em>
        <em> // we can use the @wire decorator to fetch records from a custom object: </em>
        <div><code>
        <em>// wireExample.js</em>
        import { LightningElement, wire } from 'lwc';
        import getBookRecords from '@salesforce/apex/BookController.getBookRecords';
          
        export default class WireExample extends LightningElement {
            @wire(getBookRecords) bookRecords;
        }
        </code></div>    
        <em>
          // The wireExample component uses the @wire decorator to call an Apex method named getBookRecords.
          // This method should be implemented in an Apex class (BookController) to query records from our custom Book__c object.
          // When the Apex method returns data, it's assigned to the bookRecords property, and the component will automatically re-render to display the records.
          // Our LWC component will use the @wire decorator to automatically fetch records from a custom object and display them.
          // This example demonstrates the power and simplicity of wire adapters for data retrieval in LWC.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 5 -->
    <div class="example">
      <p><span class="counter"></span> - Please bring and display the records of custom Book_c object on the UI via wire method. And if there is an error, write it to the console via a function.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), wire adapters are used to retrieve data from Salesforce objects and fields. </em>
        
        <em> // An example of using a wire adapter to fetch records from a custom Book__c object. </em>
        <em> // BookController class</em>
        <div><code>
        <em>// BookController.cls</em>
        public class BookController {
            @AuraEnabled(cacheable=true)
            public static List<Book__c> getBookRecords(){
                return [SELECT Name, Author__c FROM Book__c];
            }
        }
        </code></div>
        <em> // In HTML, we can use for:each loop to render the list that @wire returns: </em>
        <div><code>
        <em>&lt;!-- wireExample.html --></em>
        &lt;template>
            &lt;lightning-card title="Wire Adapter Example">
                &lt;div class="slds-m-around_medium">
                    &lt;p>Records from Book__c:&lt;/p>
                    &lt;template for:each={bookRecords} for:item="book">
                        &lt;p key={book.Id}>{book.Name}, {book.Author__c}&lt;/p>
                    &lt;/template>
                &lt;/div>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // we import the wire adapter from "lwc" to be able to use it. </em>
        <em> // we can use the @wire decorator to fetch records from a custom object: </em>
        <div><code>
        <em>// wireExample.js</em>
        import { LightningElement, wire } from 'lwc';
        import getBookRecords from '@salesforce/apex/BookController.getBookRecords';
          
        export default class WireExample extends LightningElement {
            bookRecords;
          
            @wire(getBookRecords)
            wiredBookRecords({ data, error }) {
                if (data) {
                    this.bookRecords = data;
                } else if (error) {
                    console.error('Error fetching Book__c object records: ' + error);
                }
            }
        }
        </code></div>    
        <em>
          // The wireExample component uses the @wire decorator to call an Apex method named getBookRecords.
          // This method should be implemented in an Apex class (BookController) to query records from our custom Book__c object.
          // When the Apex method returns data, it's assigned to the bookRecords property, and the component will automatically re-render to display the records.
          // If there's an error, it's caught and logged to the console.
          // Our LWC component will use the @wire decorator to automatically fetch records from a custom object and display them.
          // This example demonstrates the power and simplicity of wire adapters for data retrieval in LWC.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 6 -->
    <div class="example">
      <p><span class="counter"></span> - Please create a button that gets data from the database and lists them when clicked. (Call Apex Imperatively)</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), we can call Apex methods imperatively to interact with the server and retrieve or manipulate data. </em>

        <em> // Assuming we have an Apex class with a method that we want to call: </em>
        <div><code>
        <em>// MyController.cls </em>
        public with sharing class MyController {
            @AuraEnabled(cacheable=true)
            public static List&lt;Account> getAccounts(){
                return [SELECT Name, Industry FROM Account LIMIT 10];
            }
        } 
        </code></div>
        <div><code>
        <em>&lt;!-- myComponent.html --></em>
        &lt;template>
            &lt;lightning-card title="Account List" icon-name="standard:account">
                <lightning-button label="Load Accounts" onclick={loadAccounts}>&lt;/lightning-button>
                &lt;ul>
                    &lt;template for:each={accounts} for:item="acc">
                        &lt;li key={acc.Id}>
                            {acc.Name}, {acc.Industry}
                        &lt;/li>
                    &lt;/template>
                &lt;/ul>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <em> // We can call getAccounts method imperatively from an LWC component: </em>
        <div><code>
        <em>// myComponent.js </em>
        import { LightningElement, wire } from 'lwc';
        import getAccounts from '@salesforce/apex/MyController.getAccounts';

        export default class MyComponent extends LightningElement {
            accounts;

            loadAccounts() {
                getAccounts()
                    .then(result => {
                        this.accounts = result;
                    })
                    .catch(error => {
                        console.error('Error fetching accounts: ' + error);
                    });
            }
        }
        </code></div>
        <em>
          // We import the getAccounts method from our Apex class using the @salesforce/apex module.
          // In the loadAccounts function, we call getAccounts() imperatively, which sends a request to the server to execute the getAccounts method.
          // We handle the response in the .then block, where we set the accounts property with the retrieved data.
          // If there's an error, we handle it in the .catch block and log the error message.
          // This way, we can use imperative Apex calls in LWC to interact with server-side logic, retrieve data, and perform various operations.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 7 -->
    <div class="example">
      <p><span class="counter"></span> - Create a Lightning web component that uses @wire in an Apex controller to retrieve contact records. Display the contact records in a lightning-datatable. And if it throws an error, show the error message. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // In Lightning Web Components (LWC), lightning-datatable is a basic data table that fetches data during initialization. </em>

        <em> // Assuming we have an Apex class with a method that we want to call: </em>
        <div><code>
        <em>// ContactController.cls </em>
        public class ContactController {
            @AuraEnabled(cacheable = true)
            public static List&lt;Contact> getContacts(){
                try{
                    List&lt;Contact> conList = [SELECT FirstName, LastName, Email FROM Contact WITH SECURITY_ENFORCED ORDER BY Name DESC LIMIT 10];
                    return conList;
                }
                catch(Exception e){
                    throw new AuraHandledException('Forced error!');
                }
            }
        }
        </code></div>
        <div><code>
        <em>&lt;!-- contactList.html --></em>
        &lt;template>
            &lt;lightning-card title="Contacts">
                &lt;lightning-datatable key-field="Id" data={contacts.data} columns={columnas}>
                &lt;/lightning-datatable>
                &lt;template if:true={errores}>
                    &lt;p>Some errors are thrown: {errores}&lt;/p>
                &lt;template>
            &lt;/lightning-card>
        &lt;/template>
        </code></div>
        <div><code>
        <em>/* contactList.css */</em>
        p {
            margin-top: 20px;
            color: red;
        }
        </code></div>
        <em> // We can call getContacts method via @wire adapter in an LWC component: </em>
        <div><code>
        <em>// contactList.js </em>
        import { LightningElement, wire } from 'lwc';
        import {reduceErrors} from 'c/ldsUtils';
        import first from "@salesforce/schema/Contact.FirstName";
        import last from "@salesforce/schema/Contact.LastName";
        import email from "@salesforce/schema/Contact.Email";
        import getContacts from "@salesforce/apex/ContactController.getContacts";

        export default class ContactList extends LightningElement {
            columnas = [{label:"First Name", fieldName:first.fieldApiName, type:"text"},
                        {label:"Last Name", fieldName:last.fieldApiName, type:"text"},
                        {label:"Email Address", fieldName:email.fieldApiName, type:"text"}];

            @wire(getContacts) contacts;
    
            get errores(){
                if(this.contacts.error){
                    return reduceErrors(this.contacts.error);
                }
            }
        }
        </code></div>
        <em>
          // 
        </em>
      </pre>
    </div>
  </section>

  <script src="examples.js"></script>

</body>
</html>
