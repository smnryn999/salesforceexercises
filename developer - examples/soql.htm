<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>SOQL - SOSL - DML</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>SOQL - SOSL - DML Examples</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - Please create a new Book__c instance.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
        Book__c book = new Book__c(Name='War and Peace');
        book.Author__c = 'Tolstoy';
        book.Price__c = 100;
        insert book;        
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - Please write a query that searchs Tolstoy's book whose price is over 50.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
          Book__c book = [SELECT Name FROM Book__c WHERE Author__c = 'Tolstoy' AND Price__c > 50 LIMIT 1];
          System.debug(book.Name); <em> // War and Peace</em>                 
        </pre>
    </div>

    <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - Please create a contact record and relate it to an account record whose state
        is Texas.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
          <em> // Account acc = [SELECT Id, Name FROM Account WHERE BillingState='TX' LIMIT 1]; </em>
          <em> // System.debug(acc); // Account:{Id=0018e00000J1wtFAAR, Name=Edge Communications}</em>

          Contact con = new Contact(LastName='Test', AccountId=[SELECT Id, Name FROM Account WHERE BillingState='TX' LIMIT 1].Id);
          insert con;
          System.debug(con); <em> // Contact:{LastName=Test, AccountId=0018e00000J1wtFAAR, Id=0038e00000Guf9bAAB} </em>              
        </pre>
    </div>

    <!-- EXAMPLE 4 -->
    <div class="example">
      <p><span class="counter"></span> - Write a method that returns the Accounts whose Name contains the value entered
        in the parameter.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
          <em> // We can use % and _ as wildcards. </em>
          public class GetRecords {
             public static List&lt;Account&gt; getAccount(String str){
               return [SELECT Name, NumberOfEmployees FROM Account WHERE Name LIKE :('%'+str+'%')];
             }
          }        
          
          <em> // We call the method in a for loop with a parameter value. </em>
          for(Account acc:GetRecords.getAccount('United')){
             System.debug(acc.Name + ' => ' + acc.NumberOfEmployees);
          }
        </pre>
    </div>

    <!-- EXAMPLE 5 -->
    <div class="example">
      <p><span class="counter"></span> - Write a method returns the books whose language containing the values ​​entered
        in the parameter.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
          <em> // We use IN keyword because the parameter data type is List. </em>
          public class GetRecords {
             public static List&lt;Book__c&gt; getBook(List<string> strList){
                return [SELECT Name, Author__c FROM Book__c WHERE Language__c IN :strList];
             }   
          }     
	      
          <em> // We call the method in a for loop with a parameter value that is a list. </em>
          for(Book__c book:GetRecords.getBook(new List<String>{'English', 'Turkish', 'Russian'})){
             System.debug(book.Name + ' => ' + book.Author__c);
          }
        </pre>
    </div>

    <!-- EXAMPLE 6 -->
    <div class="example">
      <p><span class="counter"></span> - Find the AnnualRevenue average of the three Accounts with the largest
        AnnualRevenue values.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
          List&lt;Account&gt; listAcc = [SELECT Name, AnnualRevenue FROM Account ORDER BY AnnualRevenue DESC NULLS LAST LIMIT 3];
          
          Decimal sum = 0;
          for(Account acc:listAcc){
             sum += acc.AnnualRevenue;
          }
          System.debug(listAcc); <em> // (Account:{Name=United Oil & Gas Corp., AnnualRevenue=5600000000, Id=0018e00000JeYP7AAN}, Account:{Name=Pyramid Construction Inc., AnnualRevenue=950000000, Id=0018e00000JeYP4AAN}, Account:{Name=Express Logistics and Transport, AnnualRevenue=950000000, Id=0018e00000JeYP8AAN}) </em>
          System.debug(sum /listAcc.size()); <em> // 2500000000 </em>
        </pre>
    </div>

    <!-- EXAMPLE 7 -->
    <div class="example">
      <p><span class="counter"></span> - Update the opportunities that have expired but are still open.</p>
      <button class="showSolution">Show Solution</button>
      <pre>
          List&lt;Opportunity&gt; liste = [SELECT Name FROM Opportunity WHERE CloseDate < TODAY AND StageName NOT IN ('Closed Won','Closed Lost')];
        
          List&lt;Opportunity&gt; emptyList = new List&lt;Opportunity&gt;();
          for(opportunity opp:liste){
            system.debug(opp.name);
            opp.Description = 'Tarihi geçtiği için kapatılmıştır';
            opp.StageName = 'Closed Lost';
            emptyList.add(opp);
          }
          update emptyList;
        </pre>
    </div>

    <!-- EXAMPLE 8 -->
    <div class="example">
      <p><span class="counter"></span> - Governor Limits </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          <em> // The DML limit in a thread is 150. We can do up to 10k operations using List. </em>
          List<Contact> liste = new List<Contact>();
          for(integer i=0; i<10000; i++){
            Contact con = new Contact(LastName='Contact '+i);
            liste.add(con);
          }
          insert liste;

          System.debug([SELECT Count() FROM Contact]);
         <em> // The SOQL limit in a thread is 100. We can fetch up to 50,000 records with SOQL. </em>
          delete [SELECT Id FROM Contact WHERE CreatedDate = TODAY];
        </pre>
    </div>

    <!-- EXAMPLE 9 -->
    <div class="example">
      <p><span class="counter"></span> - Record Types in Apex </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // If we do not specify a record type when adding a record, it will save according to the default one. </em>
        <em> // We can select a specific record type with the RecordTypeId field. </em>
        <em> // The field that does not appear in the Page Layout is not ignored, we can give it a value from Apex side. </em>
        <em> // Page Lauout settings only affect the interface, they are not universal. </em>
        Opportunity opp = new Opportunity();
        opp.Name = 'Test Opp';
        opp.CloseDate = Date.today();
        opp.StageName = 'New';
        opp.Short_Term__c = 25;
        insert opp;
        
        System.debug([SELECT Short_Term__c FROM Opportunity WHERE CreatedDate = TODAY].Short_Term__c); <em> // 25 </em>
        
        RecordType rType = [SELECT Id, Name FROM RecordType WHERE DeveloperName = 'Short_Term_Type'];
        System.debug(rType.Name); <em> // Short Term Type </em>
        
        Opportunity opp = new Opportunity();
        opp.Name = 'New Test Opp';
        opp.CloseDate = Date.today();
        opp.StageName = 'New';
        opp.Short_Term__c = 45;
        opp.RecordTypeId = rType.Id; <em> // '0128e000000XjORAA0' </em>
        insert opp;
      </pre>
    </div>

    <!-- EXAMPLE 10 -->
    <div class="example">
      <p><span class="counter"></span> - Get Amount totals by grouping the closed opportunities according to their
        Stage. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          <em> // Query to retrieve the total amount of closed opportunities by stage </em>
          <span class='datatype'>List&lt;AggregateResult&gt;</span> results = [SELECT StageName, SUM(Amount) totalAmount FROM Opportunity WHERE IsClosed = true GROUP BY StageName];

          <em> // Iterate over the results and access the aggregated values </em>
          for (AggregateResult result : results) {
            String stageName = (String)result.get('StageName');
            Decimal totalAmount = (Decimal)result.get('totalAmount');
            System.debug('Stage Name: ' + stageName + ', Total Amount: ' + totalAmount);
          }
      </pre>
    </div>

    <!-- EXAMPLE 11 -->
    <div class="example">
      <p><span class="counter"></span> - Write the Name and Email information of the Owner of the book "Madonna in a Fur
        Coat" to the console. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          Book__c book = [SELECT Owner.Name, Owner.Email FROM Book__c WHERE Name = 'Madonna in a Fur Coat'];
          System.debug('Owner Name: ' + book.Owner.Name + ', Owner Email: ' + book.Owner.Email); <em> // Owner Name: Rose Gonzales, Owner Email: rosegonzales@xmail.com </em>
      </pre>
    </div>

    <!-- EXAMPLE 12 -->
    <div class="example">
      <p><span class="counter"></span> - Write the Names of all Account and Contact records containing "United" to the
        console. Get accounts with more than 10 thousand employees. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // We can use * and ? as wildcards. </em>
        <em> // Perform SOSL search and retrieve records. </em>
        List&lt;List&lt;SObject&gt;&gt; searchResults = [FIND 'United' IN ALL FIELDS RETURNING Account (Name WHERE NumberOfEmployees > 10000), Contact (Name)];
        System.debug(searchResults);
          
        List&lt;Account&gt; accounts = new List&lt;Account&gt();
        List&lt;Contact&gt; contacts = new List&lt;Contact&gt();
          
        <em> // Loop through search results and populate separate lists for accounts and contacts </em>
        for(List&lt;SObject&gt; searchResult : searchResults) {
	        for(Object obj : searchResult) {
                    if(obj instanceof Account) {
                        accounts.add((Account)obj);
                    }       
                    else if(obj instanceof Contact) {
                        contacts.add((Contact)obj);
                    }
                }
        }

        <em> // Process the retrieved records </em>
        for(Account acc : accounts) {
            System.debug('Account: ' + acc.Name);
        }
		   
        for(Contact con : contacts) {
            System.debug('Contact: ' + con.Name);
        }
      </pre>
    </div>

    <!-- EXAMPLE 13 -->
    <div class="example">
      <p><span class="counter"></span> - Write the Titles of all files containing “Anna Karenina” to the console. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        List&lt;List&lt;SObject&gt;&gt; searchResults = [FIND 'Anna Karenina' IN ALL FIELDS RETURNING ContentDocument(Title)];
        System.debug(searchResults); <em> // ((ContentDocument:{Title=Books, Id=0698e00000CezhFAAR})) </em>

        for(List&lt;sObject&gt; file:files){
          for(SObject f:file){
              ContentDocument doc = (ContentDocument)f;
              System.debug(doc.Title); <em> // Books </em>
          }
        }
      </pre>
    </div>

    <!-- EXAMPLE 14 -->
    <div class="example">
      <p><span class="counter"></span> - Write Name, Email and Company information of the people (Contact, Lead) whose
        Name contains "Green" to the console. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // NAME FIELDS contains FirstName, LastName, Company Name </em>
        String searchQuery = 'Gr?en*'; <em> // Graen, Green, Grien </em>
        List&lt;List&lt;SObject&gt;&gt; searchResults = [FIND :searchQuery IN NAME FIELDS RETURNING Contact(Name, Email), Lead(Name, Company)];
          
        <em> // Loop through the search results and separate them based on the object type </em>
        for(List&lt;SObject&gt; result:results){
          for(SObject obj:result){
              if(obj instanceof Contact){
                  Contact con = (Contact)obj;
                  System.debug('Contact Name: ' + con.Name + ', Contact Email: ' + con.Email);
              }
              else {
                  Lead lead = (Lead)obj;
                  System.debug('Lead Name: ' + lead.Name + ', Lead Company: ' + lead.Company);
              }
          }
      }
      </pre>
    </div>

  </section>

  <script src="examples.js"></script>

</body>

</html>
