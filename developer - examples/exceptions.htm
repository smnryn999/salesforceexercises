<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>Apex Exceptions</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>Apex Exceptions</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - How can we use try - catch? </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          Account acc = new Account();
          insert acc; <em> // throws System.DmlException, because required field is missing. </em>

          <em> // But if we use the DML in try block it does not give error and the inside of the catch block works.</em>
          try{
             insert acc;
          }
          catch(Exception e){
             System.debug('There is an error.');
          }

          <em> // This time required field is not missing. </em>
          Account acc = new Account(Name = 'New Account');

          <em> // The inside of the try block works but the inside of the catch block does not.</em>
          try{
             insert acc;
          }
          catch(Exception e){
             System.debug('There is an error.');
          }
      </pre>
    </div>

    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - Limit Exception </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          for(integer i=1; i<201; i++){
             Contact con = new Contact(LastName = 'Contact' + i);
             insert con; <em> // throws System.LimitException </em>
          }
      </pre>
    </div>

    <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - NullPointerException </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          String str;
        
          try{
             Boolean strContains = str.contains("xyz");
          }
          catch(NullPointerException e){
             System.debug('There is an error: ' + e.getMessage()); <em> // There is an error: Attempt to de-reference a null object </em>
          }
      </pre>
    </div>

    <!-- EXAMPLE 4 -->
    <div class="example">
      <p><span class="counter"></span> - MathException </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          Integer num1 = 5;
          Integer num1 = 0;
        
          try{
             System.debug(num1/num2);
          }
          catch(MathException e){
             System.debug('There is an error: ' + e.getMessage()); <em> // There is an error: Divide by 0 </em>
          }
      </pre>
    </div>

    <!-- EXAMPLE 5 -->
    <div class="example">
      <p><span class="counter"></span> - ListException </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          List<String> colors = new List<String>{'white'};
        
          try{
             colors[1] = 'green';
          }
          catch(ListException e){
             System.debug('There is an error: ' + e.getMessage()); <em> // There is an error: List index out of bounds: 1</em>
          }
      </pre>
    </div>

    <!-- EXAMPLE 6 -->
    <div class="example">
      <p><span class="counter"></span> - QueryException </p>
      <button class="showSolution">Show Solution</button>
      <pre>
          List<String> colors = new List<String>{'white'};
        
          try{
             colors[1] = 'green';
          }
          catch(QueryException e){
             System.debug('There is an error: ' + e.getMessage()); <em> // There is an error: List index out of bounds: 1</em>
          }
      </pre>
          </div>
    
  </section>

  <script src="examples.js"></script>

</body>

</html>

