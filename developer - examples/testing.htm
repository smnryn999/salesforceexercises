<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="UTF-8">
  <title>Apex Testing</title>
  <link rel="stylesheet" href="../test.css">
</head>

<body>
  <header>
    <h1>Apex Testing</h1>
  </header>

  <section>

    <!-- EXAMPLE 1 -->
    <div class="example">
      <p><span class="counter"></span> - Please explain with a plain example how a test class use. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // Apex test classes are used to test the functionality of your Apex code, ensuring that it works as expected and meets Salesforce's governor limits.</em>
        <em> //  a Calculator class with a method add that adds two numbers </em>
        <div><code>
      public class Calculator {
          public static Integer add(Integer num1, Integer num2) {
              return num1 + num2;
          }
      }
        </code></div>
        <em> // Now we are testing Calculator class</em>
        <div><code>
      @isTest
      public class CalculatorTest {
          <em>// Test method to test the 'add' method of the Calculator class </em>
          @isTest
          static void testAdd() {
              <em>// Define test data </em>
              Integer num1 = 5;
              Integer num2 = 3;
                
              <em>// Call the method you want to test </em>
              Integer result = Calculator.add(num1, num2);
                
              <em>// Verify the result </em>
              System.assertEquals(8, result, 'Addition result should be 8');
          }
      }
        </code></div>
        <em>
            // @isTest annotation indicates that this class is a test class.
            // The testAdd() method tests the add method of the Calculator class.
            // Test data is defined with two integers, num1 and num2.
            // The Calculator.add() method is called with the test data, and the result is stored in the result variable.
            // System.assertEquals is used to assert that the result of the addition is equal to 8, and an optional message is provided.
            // As a result, this test class works with a 100 percent rate.
        </em>
      </pre>
    </div>
    
    <!-- EXAMPLE 2 -->
    <div class="example">
      <p><span class="counter"></span> - Please create a method that calculates the factorial of the value given to its parameter and test it. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> //  Let's say we have an Apex class that calculates the factorial of a number, and we want to create a test class for it: </em>
        <div><code>
      public class MathOperations {
          public static Integer factorial(Integer n) {
              if (n <= 1) {
                  return 1;
              } else {
                  return n * factorial(n - 1);
              }
          }
      }
        </code></div>
        <em> // Now we are testing MathOperations class</em>
        <div><code>
      @isTest
      public class MathOperationsTest {
          @isTest
          static void testFactorialPositive() {
              Integer result = MathOperations.factorial(5);
              System.assertEquals(120, result, 'Factorial of 5 should be 120');
          }

          @isTest
          static void testFactorialZero() {
              Integer result = MathOperations.factorial(0);
              System.assertEquals(1, result, 'Factorial of 0 should be 1');
          }

          @isTest
          static void testFactorialNegative() {
              Integer result = MathOperations.factorial(-3);
              System.assertEquals(1, result, 'Factorial of a negative number should be 1');
          }
      }
        </code></div>
        <em>
           // The MathOperations class has a method factorial that calculates the factorial of a given number.
           // The MathOperationsTest test class contains three test methods:
           // testFactorialPositive tests the factorial of a positive number (5).
           // testFactorialZero tests the factorial of zero.
           // testFactorialNegative tests the factorial of a negative number (-3).
           // In each test method, we call the factorial method from the MathOperations class and use System.assertEquals to assert that the expected result matches the actual result.
           
           // These test methods cover different scenarios, such as positive numbers, zero, and negative numbers.
           // Running these tests helps ensure that the factorial method in the MathOperations class behaves as expected and provides accurate results under various conditions.
        </em>
      </pre>
    </div>

    <!-- EXAMPLE 3 -->
    <div class="example">
      <p><span class="counter"></span> - Please test a trigger and a handler class. </p>
      <button class="showSolution">Show Solution</button>
      <pre>
        <em> // Apex test classes are used to test the functionality of your Apex code, ensuring that it works as expected and meets Salesforce's governor limits.</em>
        <em> // a HandlerClass class with a method setParent that sets parents of duplicate accounts. </em>
        re>
        <div><code>
      public class HandlerClass {
          public static void setParent(List<Account> newAccounts){
              List&lt;Account> currentAccounts = [SELECT Id, Name FROM Account];
        
              for(Account newAcc:newAccounts){
                  for(Account oldAcc:currentAccounts){
                      if(newAcc.Name == oldAcc.Name){
                          newAcc.ParentId = oldAcc.id;
                          newAcc.Name = newAcc.Name + ' ' + (newAcc.BillingCountry != null ? newAcc.BillingCountry : 'Child');
                      }
                  }
              }
          }
      }
        </div></code>
        <div><code>
      trigger AccountTrigger on Account (before insert) {
          if(Trigger.isBefore <span style='color:red'>&&</span> Trigger.isInsert){
              HandlerClass.setParent(Trigger.new);
          }
      }      
        </div></code>
        <em> // Now we are testing HandlerClass and AccountTrigger</em>
        <div><code>
      @isTest
      private class TestAccountTrigger {
          @testSetup static void buildData(){
              Account acc = new Account(Name='New Account');
              insert acc;
        
              Account acc2 = new Account(Name='Test Account');
              insert acc2;
          } 
    
          @isTest static void test(){
              List&lt;Account> listAcc = new List&lt;Account>();

              <em>// We are creating an account with the same name as one in buildData() method and its country is not null.</em>
              Account acc = new Account(Name='New Account', BillingCountry='Spain'); <em>// we expect it will be "New Account Spain"</em>
              listAcc.add(acc);

              <em>// We are creating an account with the same name as one in buildData() method and its country is null.</em>
              Account acc2 = new Account(Name='Test Account'); <em>// we expect it will be "Test Account Child"</em>
              listAcc.add(acc2);

              <em>// We are creating an account with the different name from ones in buildData() method.</em>
              Account acc3 = new Account(Name='Not Existing Account', Industry='Banking'); <em>// we expect its name will not change</em>
              listAcc.add(acc3);
        
              insert listAcc;
        
              System.assertEquals(5, [SELECT Count() FROM Account]);
        
              List&lt;Account> newAccount =  [SELECT Name, ParentId FROM Account WHERE Name='New Account Spain'];
              System.assertEquals(1, newAccount.size());
              System.assert(newAccount[0].ParentId != null);
        
              System.assertEquals(1, [SELECT Count() FROM Account WHERE Name='Test Account Child']);
              System.assert([SELECT ParentId FROM Account WHERE Name='Test Account Child'].parentId != null);
        
              List&lt;Account> notExcistingAccount =  [SELECT Name, ParentId, Rating FROM Account WHERE Name='Not Existing Account'];
              System.assertEquals(1, notExistingAccount.size());
              System.assert(notExistingAccount[0].ParentId == null);
              System.assert(notExistingAccount[0].Rating == 'Hot');
          }
      }
        </code></div>
        <em>
            // @isTest annotation indicates that this class is a test class.
            // @testSetup annotation indicates that buildData() method creates data we need to use for testing.
            // The test() method tests the add method of the HandlerClass class and AccountTrigger trigger.
            // Test data is defined with two account records, "New Account" and "Test Account".
            // We create two more records with the same name as the previous ones and one record with a completely different name (Not Existing Account).
            // We expect to have one record named "New Account Spain" and one record named "Test Account Child". And their ParentId fields must be filled.
            // We also expect to have a record named "Not Existing Account" with an empty ParentId field.
            // We use System.assertEquals and System.assert to assert that the trigger and class work correctly.
            // Actually, we are also testing a trigger that updates the Rating field to "Hot" value when the Industry field is "Banking"
            // As a result, this test class works with a 100 percent rate.
        </em>
      </pre>
    </div>

    

  </section>

  <script src="examples.js"></script>

</body>

</html>
